=== modified file 'src/lib/__init__.py'
--- src/lib/__init__.py	2012-06-17 12:24:49 +0000
+++ src/lib/__init__.py	2013-12-13 10:43:14 +0000
@@ -177,6 +177,14 @@
 
 TMP_FILE	= 'screenlets.' + os.environ['USER'] + '.running'
 
+DIR_USER_LOG = os.path.join(get_runtime_dir(strict=False), 'screenlets','log')
+try:
+	if not os.path.isdir(DIR_USER_LOG):
+		os.system('mkdir -p %s' % DIR_USER_LOG)
+except:
+	pass
+
+
 DIR_USER_ROOT = screenlets.INSTALL_PREFIX + '/share/screenlets'
 
 DIR_USER = os.path.join(os.environ['HOME'], '.screenlets')
@@ -2629,8 +2637,9 @@
 		# launch screenlet as separate process
 #		print "Launching Screenlet from: %s" % slfile
 		if debug:
-			print "Logging output goes to: "+DIR_CONFIG+"/%sScreenlet.log" % name
-			out = DIR_CONFIG+'/%sScreenlet.log' % name
+			out =DIR_USER_LOG +'/%sScreenlet.log' % name
+			print "Logging output goes to: %s" % out
+			
 		else:
 			out = '/dev/null'
 		os.system('python -u %s > %s &' % (slfile, out))

=== modified file 'src/share/screenlets-manager/screenlets-manager.py'
--- src/share/screenlets-manager/screenlets-manager.py	2012-03-22 06:59:17 +0000
+++ src/share/screenlets-manager/screenlets-manager.py	2013-12-13 10:33:24 +0000
@@ -169,7 +169,7 @@
 						self.model.remove(it)
 						if screenlets.show_question(None, _('Do you also want to remove the Screenlet configuration files?')):
 							os.system('rm -rf %s/%s' % (screenlets.DIR_CONFIG, info.name))
-							os.system('rm -rf %s/%sScreenlet.log' % (screenlets.DIR_CONFIG, info.name))
+							os.system('rm -rf %s/%sScreenlet.log' % (screenlets.DIR_USER_LOG, info.name))
 				else:
 					screenlets.show_error(None, _('Can\'t delete system-wide screenlets.'))
 		return False

=== modified file 'src/lib/session.py'
--- src/lib/session.py	2012-07-17 18:49:02 +0000
+++ src/lib/session.py	2013-12-13 11:32:19 +0000
@@ -57,9 +57,10 @@
 def _(s):
 	return gettext.gettext(s)
 
+from xdg.BaseDirectory import *
 
 # temporary path for saving files for opened screenlets
-TMP_DIR		= '/tmp/screenlets'
+TMP_DIR		=  os.path.join(get_runtime_dir(strict=False), 'screenlets')
 TMP_FILE	= 'screenlets.' + os.environ['USER'] + '.running'
 
 
@@ -80,7 +81,7 @@
 		self.name 		= name
 		self.screenlet 	= screenlet_classobj
 		self.instances 	= []
-		self.tempfile	= TMP_DIR + '/' + TMP_FILE
+		self.tempfile	= os.path.join(TMP_DIR, TMP_FILE)
 		# check sys.args for "--session"-argument and override name, if set
 		self.__parse_commandline()
 		# set session path (and create dir-tree if not existent)
@@ -312,10 +313,15 @@
 					os.remove(TMP_DIR)
 
 				print "No global tempdir found, creating new one."
-				os.mkdir(TMP_DIR)
+				try:
+					os.makedirs(TMP_DIR)
+				except OSError as exc: # Python >2.5
+				        if exc.errno == errno.EEXIST and os.path.isdir(path):
+				            pass
+			        else: raise
 				# make the tmp directory accessible for all users
 				
-				os.chmod(TMP_DIR, S_IRWXU | S_IRWXG | S_IRWXO)
+				#os.chmod(TMP_DIR, S_IRWXU | S_IRWXG | S_IRWXO)
 				print 'Temp directory %s created.' % TMP_DIR
 			except OSError, e:
 				print 'Error: Unable to create temp directory %s - screenlets-manager will not work properly.' % TMP_DIR

